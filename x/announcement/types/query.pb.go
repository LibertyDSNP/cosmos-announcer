// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: announcement/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetBroadcastRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBroadcastRequest) Reset()         { *m = QueryGetBroadcastRequest{} }
func (m *QueryGetBroadcastRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBroadcastRequest) ProtoMessage()    {}
func (*QueryGetBroadcastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{0}
}
func (m *QueryGetBroadcastRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBroadcastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBroadcastRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBroadcastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBroadcastRequest.Merge(m, src)
}
func (m *QueryGetBroadcastRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBroadcastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBroadcastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBroadcastRequest proto.InternalMessageInfo

func (m *QueryGetBroadcastRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBroadcastResponse struct {
	Broadcast Broadcast `protobuf:"bytes,1,opt,name=Broadcast,proto3" json:"Broadcast"`
}

func (m *QueryGetBroadcastResponse) Reset()         { *m = QueryGetBroadcastResponse{} }
func (m *QueryGetBroadcastResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBroadcastResponse) ProtoMessage()    {}
func (*QueryGetBroadcastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{1}
}
func (m *QueryGetBroadcastResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBroadcastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBroadcastResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBroadcastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBroadcastResponse.Merge(m, src)
}
func (m *QueryGetBroadcastResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBroadcastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBroadcastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBroadcastResponse proto.InternalMessageInfo

func (m *QueryGetBroadcastResponse) GetBroadcast() Broadcast {
	if m != nil {
		return m.Broadcast
	}
	return Broadcast{}
}

type QueryAllBroadcastRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBroadcastRequest) Reset()         { *m = QueryAllBroadcastRequest{} }
func (m *QueryAllBroadcastRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBroadcastRequest) ProtoMessage()    {}
func (*QueryAllBroadcastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{2}
}
func (m *QueryAllBroadcastRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBroadcastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBroadcastRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBroadcastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBroadcastRequest.Merge(m, src)
}
func (m *QueryAllBroadcastRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBroadcastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBroadcastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBroadcastRequest proto.InternalMessageInfo

func (m *QueryAllBroadcastRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBroadcastResponse struct {
	Broadcast  []Broadcast         `protobuf:"bytes,1,rep,name=Broadcast,proto3" json:"Broadcast"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBroadcastResponse) Reset()         { *m = QueryAllBroadcastResponse{} }
func (m *QueryAllBroadcastResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBroadcastResponse) ProtoMessage()    {}
func (*QueryAllBroadcastResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{3}
}
func (m *QueryAllBroadcastResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBroadcastResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBroadcastResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBroadcastResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBroadcastResponse.Merge(m, src)
}
func (m *QueryAllBroadcastResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBroadcastResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBroadcastResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBroadcastResponse proto.InternalMessageInfo

func (m *QueryAllBroadcastResponse) GetBroadcast() []Broadcast {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *QueryAllBroadcastResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSentAnnouncementRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSentAnnouncementRequest) Reset()         { *m = QueryGetSentAnnouncementRequest{} }
func (m *QueryGetSentAnnouncementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentAnnouncementRequest) ProtoMessage()    {}
func (*QueryGetSentAnnouncementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{4}
}
func (m *QueryGetSentAnnouncementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentAnnouncementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentAnnouncementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentAnnouncementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentAnnouncementRequest.Merge(m, src)
}
func (m *QueryGetSentAnnouncementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentAnnouncementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentAnnouncementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentAnnouncementRequest proto.InternalMessageInfo

func (m *QueryGetSentAnnouncementRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSentAnnouncementResponse struct {
	SentAnnouncement SentAnnouncement `protobuf:"bytes,1,opt,name=SentAnnouncement,proto3" json:"SentAnnouncement"`
}

func (m *QueryGetSentAnnouncementResponse) Reset()         { *m = QueryGetSentAnnouncementResponse{} }
func (m *QueryGetSentAnnouncementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentAnnouncementResponse) ProtoMessage()    {}
func (*QueryGetSentAnnouncementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{5}
}
func (m *QueryGetSentAnnouncementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentAnnouncementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentAnnouncementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentAnnouncementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentAnnouncementResponse.Merge(m, src)
}
func (m *QueryGetSentAnnouncementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentAnnouncementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentAnnouncementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentAnnouncementResponse proto.InternalMessageInfo

func (m *QueryGetSentAnnouncementResponse) GetSentAnnouncement() SentAnnouncement {
	if m != nil {
		return m.SentAnnouncement
	}
	return SentAnnouncement{}
}

type QueryAllSentAnnouncementRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentAnnouncementRequest) Reset()         { *m = QueryAllSentAnnouncementRequest{} }
func (m *QueryAllSentAnnouncementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentAnnouncementRequest) ProtoMessage()    {}
func (*QueryAllSentAnnouncementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{6}
}
func (m *QueryAllSentAnnouncementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentAnnouncementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentAnnouncementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentAnnouncementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentAnnouncementRequest.Merge(m, src)
}
func (m *QueryAllSentAnnouncementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentAnnouncementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentAnnouncementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentAnnouncementRequest proto.InternalMessageInfo

func (m *QueryAllSentAnnouncementRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSentAnnouncementResponse struct {
	SentAnnouncement []SentAnnouncement  `protobuf:"bytes,1,rep,name=SentAnnouncement,proto3" json:"SentAnnouncement"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentAnnouncementResponse) Reset()         { *m = QueryAllSentAnnouncementResponse{} }
func (m *QueryAllSentAnnouncementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentAnnouncementResponse) ProtoMessage()    {}
func (*QueryAllSentAnnouncementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{7}
}
func (m *QueryAllSentAnnouncementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentAnnouncementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentAnnouncementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentAnnouncementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentAnnouncementResponse.Merge(m, src)
}
func (m *QueryAllSentAnnouncementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentAnnouncementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentAnnouncementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentAnnouncementResponse proto.InternalMessageInfo

func (m *QueryAllSentAnnouncementResponse) GetSentAnnouncement() []SentAnnouncement {
	if m != nil {
		return m.SentAnnouncement
	}
	return nil
}

func (m *QueryAllSentAnnouncementResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTimeoutAnnouncementRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimeoutAnnouncementRequest) Reset()         { *m = QueryGetTimeoutAnnouncementRequest{} }
func (m *QueryGetTimeoutAnnouncementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeoutAnnouncementRequest) ProtoMessage()    {}
func (*QueryGetTimeoutAnnouncementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{8}
}
func (m *QueryGetTimeoutAnnouncementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeoutAnnouncementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeoutAnnouncementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeoutAnnouncementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeoutAnnouncementRequest.Merge(m, src)
}
func (m *QueryGetTimeoutAnnouncementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeoutAnnouncementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeoutAnnouncementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeoutAnnouncementRequest proto.InternalMessageInfo

func (m *QueryGetTimeoutAnnouncementRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimeoutAnnouncementResponse struct {
	TimeoutAnnouncement TimeoutAnnouncement `protobuf:"bytes,1,opt,name=TimeoutAnnouncement,proto3" json:"TimeoutAnnouncement"`
}

func (m *QueryGetTimeoutAnnouncementResponse) Reset()         { *m = QueryGetTimeoutAnnouncementResponse{} }
func (m *QueryGetTimeoutAnnouncementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeoutAnnouncementResponse) ProtoMessage()    {}
func (*QueryGetTimeoutAnnouncementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{9}
}
func (m *QueryGetTimeoutAnnouncementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeoutAnnouncementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeoutAnnouncementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeoutAnnouncementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeoutAnnouncementResponse.Merge(m, src)
}
func (m *QueryGetTimeoutAnnouncementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeoutAnnouncementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeoutAnnouncementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeoutAnnouncementResponse proto.InternalMessageInfo

func (m *QueryGetTimeoutAnnouncementResponse) GetTimeoutAnnouncement() TimeoutAnnouncement {
	if m != nil {
		return m.TimeoutAnnouncement
	}
	return TimeoutAnnouncement{}
}

type QueryAllTimeoutAnnouncementRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeoutAnnouncementRequest) Reset()         { *m = QueryAllTimeoutAnnouncementRequest{} }
func (m *QueryAllTimeoutAnnouncementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeoutAnnouncementRequest) ProtoMessage()    {}
func (*QueryAllTimeoutAnnouncementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{10}
}
func (m *QueryAllTimeoutAnnouncementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeoutAnnouncementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeoutAnnouncementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeoutAnnouncementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeoutAnnouncementRequest.Merge(m, src)
}
func (m *QueryAllTimeoutAnnouncementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeoutAnnouncementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeoutAnnouncementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeoutAnnouncementRequest proto.InternalMessageInfo

func (m *QueryAllTimeoutAnnouncementRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimeoutAnnouncementResponse struct {
	TimeoutAnnouncement []TimeoutAnnouncement `protobuf:"bytes,1,rep,name=TimeoutAnnouncement,proto3" json:"TimeoutAnnouncement"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeoutAnnouncementResponse) Reset()         { *m = QueryAllTimeoutAnnouncementResponse{} }
func (m *QueryAllTimeoutAnnouncementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeoutAnnouncementResponse) ProtoMessage()    {}
func (*QueryAllTimeoutAnnouncementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{11}
}
func (m *QueryAllTimeoutAnnouncementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeoutAnnouncementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeoutAnnouncementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeoutAnnouncementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeoutAnnouncementResponse.Merge(m, src)
}
func (m *QueryAllTimeoutAnnouncementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeoutAnnouncementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeoutAnnouncementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeoutAnnouncementResponse proto.InternalMessageInfo

func (m *QueryAllTimeoutAnnouncementResponse) GetTimeoutAnnouncement() []TimeoutAnnouncement {
	if m != nil {
		return m.TimeoutAnnouncement
	}
	return nil
}

func (m *QueryAllTimeoutAnnouncementResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPublicationRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPublicationRequest) Reset()         { *m = QueryGetPublicationRequest{} }
func (m *QueryGetPublicationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicationRequest) ProtoMessage()    {}
func (*QueryGetPublicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{12}
}
func (m *QueryGetPublicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicationRequest.Merge(m, src)
}
func (m *QueryGetPublicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicationRequest proto.InternalMessageInfo

func (m *QueryGetPublicationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPublicationResponse struct {
	Publication Publication `protobuf:"bytes,1,opt,name=Publication,proto3" json:"Publication"`
}

func (m *QueryGetPublicationResponse) Reset()         { *m = QueryGetPublicationResponse{} }
func (m *QueryGetPublicationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicationResponse) ProtoMessage()    {}
func (*QueryGetPublicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{13}
}
func (m *QueryGetPublicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicationResponse.Merge(m, src)
}
func (m *QueryGetPublicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicationResponse proto.InternalMessageInfo

func (m *QueryGetPublicationResponse) GetPublication() Publication {
	if m != nil {
		return m.Publication
	}
	return Publication{}
}

type QueryAllPublicationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicationRequest) Reset()         { *m = QueryAllPublicationRequest{} }
func (m *QueryAllPublicationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicationRequest) ProtoMessage()    {}
func (*QueryAllPublicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{14}
}
func (m *QueryAllPublicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicationRequest.Merge(m, src)
}
func (m *QueryAllPublicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicationRequest proto.InternalMessageInfo

func (m *QueryAllPublicationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPublicationResponse struct {
	Publication []Publication       `protobuf:"bytes,1,rep,name=Publication,proto3" json:"Publication"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicationResponse) Reset()         { *m = QueryAllPublicationResponse{} }
func (m *QueryAllPublicationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicationResponse) ProtoMessage()    {}
func (*QueryAllPublicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{15}
}
func (m *QueryAllPublicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicationResponse.Merge(m, src)
}
func (m *QueryAllPublicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicationResponse proto.InternalMessageInfo

func (m *QueryAllPublicationResponse) GetPublication() []Publication {
	if m != nil {
		return m.Publication
	}
	return nil
}

func (m *QueryAllPublicationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRelayRegistryRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRelayRegistryRequest) Reset()         { *m = QueryGetRelayRegistryRequest{} }
func (m *QueryGetRelayRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelayRegistryRequest) ProtoMessage()    {}
func (*QueryGetRelayRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{16}
}
func (m *QueryGetRelayRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelayRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelayRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelayRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelayRegistryRequest.Merge(m, src)
}
func (m *QueryGetRelayRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelayRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelayRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelayRegistryRequest proto.InternalMessageInfo

func (m *QueryGetRelayRegistryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRelayRegistryResponse struct {
	RelayRegistry RelayRegistry `protobuf:"bytes,1,opt,name=RelayRegistry,proto3" json:"RelayRegistry"`
}

func (m *QueryGetRelayRegistryResponse) Reset()         { *m = QueryGetRelayRegistryResponse{} }
func (m *QueryGetRelayRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelayRegistryResponse) ProtoMessage()    {}
func (*QueryGetRelayRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{17}
}
func (m *QueryGetRelayRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelayRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelayRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelayRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelayRegistryResponse.Merge(m, src)
}
func (m *QueryGetRelayRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelayRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelayRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelayRegistryResponse proto.InternalMessageInfo

func (m *QueryGetRelayRegistryResponse) GetRelayRegistry() RelayRegistry {
	if m != nil {
		return m.RelayRegistry
	}
	return RelayRegistry{}
}

type QueryAllRelayRegistryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelayRegistryRequest) Reset()         { *m = QueryAllRelayRegistryRequest{} }
func (m *QueryAllRelayRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelayRegistryRequest) ProtoMessage()    {}
func (*QueryAllRelayRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{18}
}
func (m *QueryAllRelayRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelayRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelayRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelayRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelayRegistryRequest.Merge(m, src)
}
func (m *QueryAllRelayRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelayRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelayRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelayRegistryRequest proto.InternalMessageInfo

func (m *QueryAllRelayRegistryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRelayRegistryResponse struct {
	RelayRegistry []RelayRegistry     `protobuf:"bytes,1,rep,name=RelayRegistry,proto3" json:"RelayRegistry"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelayRegistryResponse) Reset()         { *m = QueryAllRelayRegistryResponse{} }
func (m *QueryAllRelayRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelayRegistryResponse) ProtoMessage()    {}
func (*QueryAllRelayRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1683cf4edaf7e74, []int{19}
}
func (m *QueryAllRelayRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelayRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelayRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelayRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelayRegistryResponse.Merge(m, src)
}
func (m *QueryAllRelayRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelayRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelayRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelayRegistryResponse proto.InternalMessageInfo

func (m *QueryAllRelayRegistryResponse) GetRelayRegistry() []RelayRegistry {
	if m != nil {
		return m.RelayRegistry
	}
	return nil
}

func (m *QueryAllRelayRegistryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetBroadcastRequest)(nil), "Liberty30.usappchain.announcement.QueryGetBroadcastRequest")
	proto.RegisterType((*QueryGetBroadcastResponse)(nil), "Liberty30.usappchain.announcement.QueryGetBroadcastResponse")
	proto.RegisterType((*QueryAllBroadcastRequest)(nil), "Liberty30.usappchain.announcement.QueryAllBroadcastRequest")
	proto.RegisterType((*QueryAllBroadcastResponse)(nil), "Liberty30.usappchain.announcement.QueryAllBroadcastResponse")
	proto.RegisterType((*QueryGetSentAnnouncementRequest)(nil), "Liberty30.usappchain.announcement.QueryGetSentAnnouncementRequest")
	proto.RegisterType((*QueryGetSentAnnouncementResponse)(nil), "Liberty30.usappchain.announcement.QueryGetSentAnnouncementResponse")
	proto.RegisterType((*QueryAllSentAnnouncementRequest)(nil), "Liberty30.usappchain.announcement.QueryAllSentAnnouncementRequest")
	proto.RegisterType((*QueryAllSentAnnouncementResponse)(nil), "Liberty30.usappchain.announcement.QueryAllSentAnnouncementResponse")
	proto.RegisterType((*QueryGetTimeoutAnnouncementRequest)(nil), "Liberty30.usappchain.announcement.QueryGetTimeoutAnnouncementRequest")
	proto.RegisterType((*QueryGetTimeoutAnnouncementResponse)(nil), "Liberty30.usappchain.announcement.QueryGetTimeoutAnnouncementResponse")
	proto.RegisterType((*QueryAllTimeoutAnnouncementRequest)(nil), "Liberty30.usappchain.announcement.QueryAllTimeoutAnnouncementRequest")
	proto.RegisterType((*QueryAllTimeoutAnnouncementResponse)(nil), "Liberty30.usappchain.announcement.QueryAllTimeoutAnnouncementResponse")
	proto.RegisterType((*QueryGetPublicationRequest)(nil), "Liberty30.usappchain.announcement.QueryGetPublicationRequest")
	proto.RegisterType((*QueryGetPublicationResponse)(nil), "Liberty30.usappchain.announcement.QueryGetPublicationResponse")
	proto.RegisterType((*QueryAllPublicationRequest)(nil), "Liberty30.usappchain.announcement.QueryAllPublicationRequest")
	proto.RegisterType((*QueryAllPublicationResponse)(nil), "Liberty30.usappchain.announcement.QueryAllPublicationResponse")
	proto.RegisterType((*QueryGetRelayRegistryRequest)(nil), "Liberty30.usappchain.announcement.QueryGetRelayRegistryRequest")
	proto.RegisterType((*QueryGetRelayRegistryResponse)(nil), "Liberty30.usappchain.announcement.QueryGetRelayRegistryResponse")
	proto.RegisterType((*QueryAllRelayRegistryRequest)(nil), "Liberty30.usappchain.announcement.QueryAllRelayRegistryRequest")
	proto.RegisterType((*QueryAllRelayRegistryResponse)(nil), "Liberty30.usappchain.announcement.QueryAllRelayRegistryResponse")
}

func init() { proto.RegisterFile("announcement/query.proto", fileDescriptor_a1683cf4edaf7e74) }

var fileDescriptor_a1683cf4edaf7e74 = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x33, 0x09, 0xad, 0xd4, 0xa1, 0x45, 0x68, 0xa8, 0x2a, 0xea, 0xd2, 0x00, 0x6e, 0x55,
	0x2a, 0x04, 0x76, 0x42, 0x20, 0xa5, 0xa5, 0x01, 0x12, 0x04, 0x5c, 0x7a, 0x48, 0xd3, 0xaa, 0x87,
	0xaa, 0x12, 0xb2, 0x93, 0xa9, 0xb1, 0x34, 0xb1, 0x4d, 0x6c, 0x57, 0x8d, 0x2a, 0x2e, 0xbd, 0xf5,
	0x56, 0xa9, 0xea, 0x57, 0xe9, 0xb1, 0x55, 0x2f, 0xbb, 0xec, 0x69, 0xd9, 0xdd, 0xcb, 0x4a, 0x2b,
	0xd0, 0x0a, 0x56, 0x5a, 0xed, 0xb7, 0x58, 0xd9, 0x1e, 0x27, 0x76, 0x32, 0x0e, 0x76, 0xe2, 0xbd,
	0x59, 0x33, 0xef, 0xfd, 0xe7, 0xfd, 0xde, 0x7f, 0x60, 0x1e, 0xc0, 0x79, 0x49, 0xd3, 0x74, 0x5b,
	0x6b, 0xe2, 0x36, 0xd6, 0x2c, 0xf1, 0xcc, 0xc6, 0x9d, 0xae, 0x60, 0x74, 0x74, 0x4b, 0x47, 0xcb,
	0xdf, 0xa8, 0x32, 0xee, 0x58, 0xdd, 0x52, 0x41, 0xb0, 0x4d, 0xc9, 0x30, 0x9a, 0xa7, 0x92, 0xaa,
	0x09, 0xc1, 0x70, 0x6e, 0x41, 0xd1, 0x75, 0x85, 0x60, 0x51, 0x32, 0x54, 0xd1, 0xd9, 0xb0, 0x24,
	0x4b, 0xd5, 0x35, 0xd3, 0x13, 0xe0, 0x56, 0x9b, 0xba, 0xd9, 0xd6, 0x4d, 0x51, 0x96, 0x4c, 0xec,
	0x29, 0x8b, 0xbf, 0x14, 0x65, 0x6c, 0x49, 0x45, 0xd1, 0x90, 0x14, 0x55, 0x73, 0x83, 0x69, 0xec,
	0x42, 0xa8, 0x0c, 0xb9, 0xa3, 0x4b, 0xad, 0xa6, 0x64, 0x5a, 0x74, 0xf7, 0xd3, 0xd0, 0xae, 0x89,
	0x35, 0xeb, 0x24, 0xb8, 0x42, 0xa3, 0x56, 0x42, 0x51, 0x96, 0xda, 0xc6, 0xba, 0xcd, 0x0c, 0xcc,
	0x87, 0x02, 0x0d, 0x5b, 0x26, 0x6a, 0x33, 0x58, 0xcc, 0x72, 0x68, 0xbf, 0x83, 0x89, 0xd4, 0x3d,
	0xe9, 0x60, 0x45, 0x35, 0x2d, 0xbf, 0x39, 0xdc, 0xfb, 0x8a, 0xae, 0xe8, 0xee, 0xa7, 0xe8, 0x7c,
	0x79, 0xab, 0xfc, 0x2a, 0x9c, 0xff, 0xd6, 0xe1, 0x3c, 0xc6, 0x56, 0xcd, 0x47, 0x68, 0xe0, 0x33,
	0x1b, 0x9b, 0x16, 0x9a, 0x81, 0x59, 0xb5, 0x35, 0x0f, 0x96, 0xc0, 0xe7, 0x53, 0x8d, 0xac, 0xda,
	0xe2, 0xdb, 0xf0, 0x43, 0x46, 0xac, 0x69, 0xe8, 0x9a, 0x89, 0x51, 0x1d, 0xbe, 0xd3, 0x5b, 0x74,
	0x73, 0xa6, 0x37, 0xd6, 0x84, 0x3b, 0xfd, 0x10, 0x7a, 0x39, 0xb5, 0xa9, 0x8b, 0xeb, 0xc5, 0x4c,
	0xa3, 0x2f, 0xc2, 0xcb, 0xb4, 0xb4, 0x2a, 0x21, 0x43, 0xa5, 0x1d, 0x41, 0xd8, 0x37, 0x84, 0x1e,
	0xf7, 0x99, 0xe0, 0xb9, 0x27, 0x38, 0xee, 0x09, 0xde, 0xbd, 0xa0, 0xee, 0x09, 0x75, 0x49, 0xc1,
	0x34, 0xb7, 0x11, 0xc8, 0xe4, 0xff, 0x01, 0x94, 0x29, 0x7c, 0x08, 0x9b, 0x29, 0x37, 0x31, 0x13,
	0x3a, 0x0e, 0xd5, 0x9d, 0x75, 0xeb, 0x5e, 0xb9, 0xb3, 0x6e, 0xaf, 0x9c, 0x50, 0xe1, 0x45, 0xb8,
	0xe8, 0x7b, 0xf1, 0x1d, 0xd6, 0xac, 0x6a, 0xe0, 0xfc, 0x28, 0xfb, 0xfe, 0x00, 0x70, 0x29, 0x3a,
	0x87, 0x22, 0x63, 0x38, 0x3b, 0xb8, 0x47, 0xdb, 0x5b, 0x8a, 0x41, 0x3e, 0x98, 0x4a, 0x1b, 0x30,
	0x24, 0xc9, 0xab, 0xb4, 0xfc, 0x2a, 0x21, 0x51, 0xe5, 0xa7, 0x65, 0xf1, 0x63, 0x1f, 0x9b, 0x79,
	0xd6, 0x48, 0xec, 0x5c, 0xca, 0xd8, 0xe9, 0xd9, 0xbf, 0x09, 0x79, 0xdf, 0xca, 0xef, 0xbd, 0xdf,
	0x1a, 0x71, 0x6e, 0xc0, 0xdf, 0x00, 0x7e, 0x32, 0x32, 0x8d, 0x76, 0x43, 0x83, 0x73, 0x8c, 0x6d,
	0xea, 0x41, 0x39, 0x46, 0x43, 0x18, 0xd9, 0xb4, 0x27, 0x2c, 0x61, 0x9e, 0x50, 0x9a, 0x2a, 0x21,
	0x23, 0x68, 0xd2, 0xba, 0x10, 0xd7, 0x7e, 0x17, 0xa2, 0x8e, 0xbb, 0xab, 0x0b, 0xb9, 0x37, 0xd2,
	0x85, 0xf4, 0x2e, 0xc7, 0x1a, 0xe4, 0x7c, 0x97, 0xeb, 0xfd, 0x97, 0x22, 0xea, 0x52, 0xd8, 0xf0,
	0x23, 0x66, 0x34, 0xed, 0xc2, 0x0f, 0x70, 0x3a, 0xb0, 0x4c, 0xdb, 0x2e, 0xc4, 0xa0, 0x0f, 0x64,
	0x51, 0xea, 0xa0, 0x10, 0xdf, 0xa2, 0x45, 0x56, 0x09, 0x61, 0x14, 0x99, 0x96, 0xd7, 0xff, 0x02,
	0x4a, 0x37, 0x78, 0x4c, 0x14, 0x5d, 0x2e, 0x15, 0xba, 0xf4, 0xbc, 0x14, 0xe0, 0x82, 0xef, 0x4e,
	0xc3, 0x79, 0xd5, 0x1b, 0xf4, 0x51, 0x8f, 0x72, 0xf3, 0x1c, 0x7e, 0x1c, 0x11, 0x4f, 0x89, 0x7f,
	0x82, 0xef, 0x85, 0x36, 0x68, 0x73, 0x0b, 0x31, 0x98, 0x43, 0x79, 0x94, 0x3a, 0x2c, 0xc6, 0xff,
	0x4c, 0xcb, 0xad, 0x12, 0xc2, 0x2c, 0x37, 0x2d, 0x5f, 0xef, 0x01, 0xca, 0x39, 0x7c, 0x50, 0x34,
	0x67, 0x2e, 0x35, 0xce, 0xd4, 0xfc, 0xdd, 0xb8, 0x9a, 0x85, 0x6f, 0xb9, 0x20, 0xe8, 0x7f, 0x10,
	0x98, 0x36, 0xd0, 0x4e, 0x8c, 0x3a, 0xa3, 0x06, 0x37, 0xee, 0xeb, 0xf1, 0x92, 0xbd, 0xf2, 0xf8,
	0x2f, 0x7f, 0x7f, 0xf2, 0xe2, 0xaf, 0x6c, 0x09, 0x15, 0xc5, 0x9e, 0x8a, 0xd8, 0x57, 0x11, 0xd9,
	0x63, 0xaf, 0xf8, 0x9b, 0xda, 0x3a, 0x47, 0xff, 0x01, 0xf8, 0x6e, 0x4f, 0xb0, 0x4a, 0x48, 0x7c,
	0x0c, 0xc6, 0x90, 0x17, 0x1f, 0x83, 0x35, 0xbc, 0xf1, 0x9b, 0x2e, 0x86, 0x80, 0xd6, 0x92, 0x60,
	0xa0, 0x2b, 0x30, 0x3c, 0x09, 0xa0, 0x5a, 0x82, 0x7e, 0x46, 0x8c, 0x33, 0xdc, 0xc1, 0x44, 0x1a,
	0x94, 0x69, 0xdf, 0x65, 0xfa, 0x0a, 0x6d, 0xc7, 0x60, 0x32, 0x07, 0x44, 0x3c, 0x87, 0x9e, 0x01,
	0x38, 0x37, 0x28, 0xef, 0x18, 0x55, 0x4b, 0xd0, 0xeb, 0x89, 0x11, 0x47, 0x4c, 0x62, 0xfc, 0x8e,
	0x8b, 0xb8, 0x85, 0x4a, 0x63, 0x20, 0xa2, 0x57, 0x80, 0xf9, 0x66, 0xa3, 0xc3, 0x04, 0xcd, 0x8f,
	0x9e, 0x40, 0xb8, 0xa3, 0x49, 0x65, 0x28, 0xe3, 0x81, 0xcb, 0x58, 0x41, 0x3b, 0x31, 0x18, 0xad,
	0x61, 0x1d, 0xcf, 0xc9, 0x97, 0x00, 0x7e, 0xc0, 0x38, 0xc4, 0x31, 0xf3, 0x30, 0x81, 0x11, 0x69,
	0xe0, 0x8e, 0x1e, 0xa4, 0xf8, 0x5d, 0x17, 0x77, 0x1b, 0x95, 0xc7, 0xc3, 0x45, 0x0f, 0x40, 0xe8,
	0x95, 0x46, 0x95, 0x04, 0x36, 0x0c, 0xcf, 0x16, 0xdc, 0xee, 0xb8, 0xe9, 0x63, 0xdc, 0xd0, 0xc0,
	0x5f, 0xea, 0x9e, 0x6b, 0xf7, 0x01, 0x9c, 0x09, 0x88, 0x3a, 0x6e, 0x55, 0x12, 0xb4, 0x79, 0x12,
	0x1c, 0xf6, 0x08, 0xc4, 0x97, 0x5d, 0x9c, 0x02, 0x12, 0x92, 0xe1, 0xa0, 0x47, 0x60, 0xe0, 0x85,
	0x45, 0x7b, 0x09, 0x1a, 0xcb, 0x9a, 0x0e, 0xb8, 0xfd, 0xf1, 0x05, 0x28, 0x4c, 0xc5, 0x85, 0xf9,
	0x02, 0x6d, 0xc5, 0x80, 0xe9, 0x04, 0x15, 0x3c, 0x77, 0x1e, 0x02, 0x38, 0x1b, 0x12, 0x76, 0xfc,
	0xd9, 0x4b, 0xd0, 0xe0, 0xc9, 0xb0, 0xa2, 0x86, 0x19, 0x7e, 0xdb, 0xc5, 0xda, 0x40, 0x85, 0xa4,
	0x58, 0xb5, 0xfa, 0xc5, 0x4d, 0x1e, 0x5c, 0xde, 0xe4, 0xc1, 0xf3, 0x9b, 0x3c, 0xf8, 0xf3, 0x36,
	0x9f, 0xb9, 0xbc, 0xcd, 0x67, 0x9e, 0xde, 0xe6, 0x33, 0x3f, 0x96, 0x15, 0xd5, 0x3a, 0xb5, 0x65,
	0xa1, 0xa9, 0xb7, 0x43, 0xaa, 0xeb, 0x92, 0x61, 0xac, 0x7b, 0xba, 0xbf, 0x0e, 0xfc, 0x6c, 0x76,
	0x0d, 0x6c, 0xca, 0x6f, 0xbb, 0xff, 0x38, 0x2a, 0xbd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x29, 0x9a,
	0x42, 0x20, 0x87, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a broadcast by id.
	Broadcast(ctx context.Context, in *QueryGetBroadcastRequest, opts ...grpc.CallOption) (*QueryGetBroadcastResponse, error)
	// Queries a list of broadcast items.
	BroadcastAll(ctx context.Context, in *QueryAllBroadcastRequest, opts ...grpc.CallOption) (*QueryAllBroadcastResponse, error)
	// Queries a sentAnnouncement by id.
	SentAnnouncement(ctx context.Context, in *QueryGetSentAnnouncementRequest, opts ...grpc.CallOption) (*QueryGetSentAnnouncementResponse, error)
	// Queries a list of sentAnnouncement items.
	SentAnnouncementAll(ctx context.Context, in *QueryAllSentAnnouncementRequest, opts ...grpc.CallOption) (*QueryAllSentAnnouncementResponse, error)
	// Queries a timeoutAnnouncement by id.
	TimeoutAnnouncement(ctx context.Context, in *QueryGetTimeoutAnnouncementRequest, opts ...grpc.CallOption) (*QueryGetTimeoutAnnouncementResponse, error)
	// Queries a list of timeoutAnnouncement items.
	TimeoutAnnouncementAll(ctx context.Context, in *QueryAllTimeoutAnnouncementRequest, opts ...grpc.CallOption) (*QueryAllTimeoutAnnouncementResponse, error)
	// Queries a publication by id.
	Publication(ctx context.Context, in *QueryGetPublicationRequest, opts ...grpc.CallOption) (*QueryGetPublicationResponse, error)
	// Queries a list of publication items.
	PublicationAll(ctx context.Context, in *QueryAllPublicationRequest, opts ...grpc.CallOption) (*QueryAllPublicationResponse, error)
	// Queries a relayRegistry by id.
	RelayRegistry(ctx context.Context, in *QueryGetRelayRegistryRequest, opts ...grpc.CallOption) (*QueryGetRelayRegistryResponse, error)
	// Queries a list of relayRegistry items.
	RelayRegistryAll(ctx context.Context, in *QueryAllRelayRegistryRequest, opts ...grpc.CallOption) (*QueryAllRelayRegistryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Broadcast(ctx context.Context, in *QueryGetBroadcastRequest, opts ...grpc.CallOption) (*QueryGetBroadcastResponse, error) {
	out := new(QueryGetBroadcastResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BroadcastAll(ctx context.Context, in *QueryAllBroadcastRequest, opts ...grpc.CallOption) (*QueryAllBroadcastResponse, error) {
	out := new(QueryAllBroadcastResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/BroadcastAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentAnnouncement(ctx context.Context, in *QueryGetSentAnnouncementRequest, opts ...grpc.CallOption) (*QueryGetSentAnnouncementResponse, error) {
	out := new(QueryGetSentAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/SentAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentAnnouncementAll(ctx context.Context, in *QueryAllSentAnnouncementRequest, opts ...grpc.CallOption) (*QueryAllSentAnnouncementResponse, error) {
	out := new(QueryAllSentAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/SentAnnouncementAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeoutAnnouncement(ctx context.Context, in *QueryGetTimeoutAnnouncementRequest, opts ...grpc.CallOption) (*QueryGetTimeoutAnnouncementResponse, error) {
	out := new(QueryGetTimeoutAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/TimeoutAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeoutAnnouncementAll(ctx context.Context, in *QueryAllTimeoutAnnouncementRequest, opts ...grpc.CallOption) (*QueryAllTimeoutAnnouncementResponse, error) {
	out := new(QueryAllTimeoutAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/TimeoutAnnouncementAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Publication(ctx context.Context, in *QueryGetPublicationRequest, opts ...grpc.CallOption) (*QueryGetPublicationResponse, error) {
	out := new(QueryGetPublicationResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/Publication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicationAll(ctx context.Context, in *QueryAllPublicationRequest, opts ...grpc.CallOption) (*QueryAllPublicationResponse, error) {
	out := new(QueryAllPublicationResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/PublicationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayRegistry(ctx context.Context, in *QueryGetRelayRegistryRequest, opts ...grpc.CallOption) (*QueryGetRelayRegistryResponse, error) {
	out := new(QueryGetRelayRegistryResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/RelayRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayRegistryAll(ctx context.Context, in *QueryAllRelayRegistryRequest, opts ...grpc.CallOption) (*QueryAllRelayRegistryResponse, error) {
	out := new(QueryAllRelayRegistryResponse)
	err := c.cc.Invoke(ctx, "/Liberty30.usappchain.announcement.Query/RelayRegistryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a broadcast by id.
	Broadcast(context.Context, *QueryGetBroadcastRequest) (*QueryGetBroadcastResponse, error)
	// Queries a list of broadcast items.
	BroadcastAll(context.Context, *QueryAllBroadcastRequest) (*QueryAllBroadcastResponse, error)
	// Queries a sentAnnouncement by id.
	SentAnnouncement(context.Context, *QueryGetSentAnnouncementRequest) (*QueryGetSentAnnouncementResponse, error)
	// Queries a list of sentAnnouncement items.
	SentAnnouncementAll(context.Context, *QueryAllSentAnnouncementRequest) (*QueryAllSentAnnouncementResponse, error)
	// Queries a timeoutAnnouncement by id.
	TimeoutAnnouncement(context.Context, *QueryGetTimeoutAnnouncementRequest) (*QueryGetTimeoutAnnouncementResponse, error)
	// Queries a list of timeoutAnnouncement items.
	TimeoutAnnouncementAll(context.Context, *QueryAllTimeoutAnnouncementRequest) (*QueryAllTimeoutAnnouncementResponse, error)
	// Queries a publication by id.
	Publication(context.Context, *QueryGetPublicationRequest) (*QueryGetPublicationResponse, error)
	// Queries a list of publication items.
	PublicationAll(context.Context, *QueryAllPublicationRequest) (*QueryAllPublicationResponse, error)
	// Queries a relayRegistry by id.
	RelayRegistry(context.Context, *QueryGetRelayRegistryRequest) (*QueryGetRelayRegistryResponse, error)
	// Queries a list of relayRegistry items.
	RelayRegistryAll(context.Context, *QueryAllRelayRegistryRequest) (*QueryAllRelayRegistryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Broadcast(ctx context.Context, req *QueryGetBroadcastRequest) (*QueryGetBroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedQueryServer) BroadcastAll(ctx context.Context, req *QueryAllBroadcastRequest) (*QueryAllBroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastAll not implemented")
}
func (*UnimplementedQueryServer) SentAnnouncement(ctx context.Context, req *QueryGetSentAnnouncementRequest) (*QueryGetSentAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentAnnouncement not implemented")
}
func (*UnimplementedQueryServer) SentAnnouncementAll(ctx context.Context, req *QueryAllSentAnnouncementRequest) (*QueryAllSentAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentAnnouncementAll not implemented")
}
func (*UnimplementedQueryServer) TimeoutAnnouncement(ctx context.Context, req *QueryGetTimeoutAnnouncementRequest) (*QueryGetTimeoutAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutAnnouncement not implemented")
}
func (*UnimplementedQueryServer) TimeoutAnnouncementAll(ctx context.Context, req *QueryAllTimeoutAnnouncementRequest) (*QueryAllTimeoutAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutAnnouncementAll not implemented")
}
func (*UnimplementedQueryServer) Publication(ctx context.Context, req *QueryGetPublicationRequest) (*QueryGetPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publication not implemented")
}
func (*UnimplementedQueryServer) PublicationAll(ctx context.Context, req *QueryAllPublicationRequest) (*QueryAllPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicationAll not implemented")
}
func (*UnimplementedQueryServer) RelayRegistry(ctx context.Context, req *QueryGetRelayRegistryRequest) (*QueryGetRelayRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayRegistry not implemented")
}
func (*UnimplementedQueryServer) RelayRegistryAll(ctx context.Context, req *QueryAllRelayRegistryRequest) (*QueryAllRelayRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayRegistryAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Broadcast(ctx, req.(*QueryGetBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BroadcastAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BroadcastAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/BroadcastAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BroadcastAll(ctx, req.(*QueryAllBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/SentAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentAnnouncement(ctx, req.(*QueryGetSentAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentAnnouncementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSentAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentAnnouncementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/SentAnnouncementAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentAnnouncementAll(ctx, req.(*QueryAllSentAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeoutAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeoutAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeoutAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/TimeoutAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeoutAnnouncement(ctx, req.(*QueryGetTimeoutAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeoutAnnouncementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimeoutAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeoutAnnouncementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/TimeoutAnnouncementAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeoutAnnouncementAll(ctx, req.(*QueryAllTimeoutAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Publication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Publication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/Publication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Publication(ctx, req.(*QueryGetPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/PublicationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicationAll(ctx, req.(*QueryAllPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRelayRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/RelayRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayRegistry(ctx, req.(*QueryGetRelayRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayRegistryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRelayRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayRegistryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Liberty30.usappchain.announcement.Query/RelayRegistryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayRegistryAll(ctx, req.(*QueryAllRelayRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Liberty30.usappchain.announcement.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _Query_Broadcast_Handler,
		},
		{
			MethodName: "BroadcastAll",
			Handler:    _Query_BroadcastAll_Handler,
		},
		{
			MethodName: "SentAnnouncement",
			Handler:    _Query_SentAnnouncement_Handler,
		},
		{
			MethodName: "SentAnnouncementAll",
			Handler:    _Query_SentAnnouncementAll_Handler,
		},
		{
			MethodName: "TimeoutAnnouncement",
			Handler:    _Query_TimeoutAnnouncement_Handler,
		},
		{
			MethodName: "TimeoutAnnouncementAll",
			Handler:    _Query_TimeoutAnnouncementAll_Handler,
		},
		{
			MethodName: "Publication",
			Handler:    _Query_Publication_Handler,
		},
		{
			MethodName: "PublicationAll",
			Handler:    _Query_PublicationAll_Handler,
		},
		{
			MethodName: "RelayRegistry",
			Handler:    _Query_RelayRegistry_Handler,
		},
		{
			MethodName: "RelayRegistryAll",
			Handler:    _Query_RelayRegistryAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "announcement/query.proto",
}

func (m *QueryGetBroadcastRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBroadcastRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBroadcastRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBroadcastResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBroadcastResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBroadcastResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Broadcast.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBroadcastRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBroadcastRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBroadcastRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBroadcastResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBroadcastResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBroadcastResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Broadcast) > 0 {
		for iNdEx := len(m.Broadcast) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Broadcast[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentAnnouncementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentAnnouncementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentAnnouncementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentAnnouncementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentAnnouncementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentAnnouncementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SentAnnouncement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSentAnnouncementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentAnnouncementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentAnnouncementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSentAnnouncementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentAnnouncementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentAnnouncementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SentAnnouncement) > 0 {
		for iNdEx := len(m.SentAnnouncement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentAnnouncement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeoutAnnouncementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeoutAnnouncementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeoutAnnouncementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeoutAnnouncementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeoutAnnouncementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeoutAnnouncementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimeoutAnnouncement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeoutAnnouncementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeoutAnnouncementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeoutAnnouncementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeoutAnnouncementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeoutAnnouncementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeoutAnnouncementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimeoutAnnouncement) > 0 {
		for iNdEx := len(m.TimeoutAnnouncement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeoutAnnouncement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Publication.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Publication) > 0 {
		for iNdEx := len(m.Publication) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Publication[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelayRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelayRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelayRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelayRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelayRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelayRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RelayRegistry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRelayRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelayRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelayRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRelayRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelayRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelayRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RelayRegistry) > 0 {
		for iNdEx := len(m.RelayRegistry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayRegistry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetBroadcastRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBroadcastResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Broadcast.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBroadcastRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBroadcastResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Broadcast) > 0 {
		for _, e := range m.Broadcast {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentAnnouncementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSentAnnouncementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SentAnnouncement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSentAnnouncementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSentAnnouncementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SentAnnouncement) > 0 {
		for _, e := range m.SentAnnouncement {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTimeoutAnnouncementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimeoutAnnouncementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimeoutAnnouncement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimeoutAnnouncementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimeoutAnnouncementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimeoutAnnouncement) > 0 {
		for _, e := range m.TimeoutAnnouncement {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPublicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPublicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Publication.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPublicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPublicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Publication) > 0 {
		for _, e := range m.Publication {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelayRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRelayRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RelayRegistry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRelayRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRelayRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RelayRegistry) > 0 {
		for _, e := range m.RelayRegistry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetBroadcastRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBroadcastRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBroadcastRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBroadcastResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBroadcastResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBroadcastResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Broadcast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBroadcastRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBroadcastRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBroadcastRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBroadcastResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBroadcastResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBroadcastResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Broadcast = append(m.Broadcast, Broadcast{})
			if err := m.Broadcast[len(m.Broadcast)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentAnnouncementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentAnnouncementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentAnnouncementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentAnnouncementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentAnnouncementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentAnnouncementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAnnouncement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentAnnouncement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentAnnouncementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentAnnouncementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentAnnouncementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentAnnouncementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentAnnouncementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentAnnouncementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAnnouncement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentAnnouncement = append(m.SentAnnouncement, SentAnnouncement{})
			if err := m.SentAnnouncement[len(m.SentAnnouncement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeoutAnnouncementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeoutAnnouncementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeoutAnnouncementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeoutAnnouncementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeoutAnnouncementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeoutAnnouncementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutAnnouncement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutAnnouncement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeoutAnnouncementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeoutAnnouncementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeoutAnnouncementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeoutAnnouncementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeoutAnnouncementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeoutAnnouncementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutAnnouncement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutAnnouncement = append(m.TimeoutAnnouncement, TimeoutAnnouncement{})
			if err := m.TimeoutAnnouncement[len(m.TimeoutAnnouncement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Publication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publication = append(m.Publication, Publication{})
			if err := m.Publication[len(m.Publication)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelayRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelayRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelayRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelayRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelayRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelayRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayRegistry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelayRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelayRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelayRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelayRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelayRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelayRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayRegistry = append(m.RelayRegistry, RelayRegistry{})
			if err := m.RelayRegistry[len(m.RelayRegistry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
