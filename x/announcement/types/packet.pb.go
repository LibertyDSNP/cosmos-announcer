// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: announcement/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnnouncementPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*AnnouncementPacketData_NoData
	//	*AnnouncementPacketData_IbcBatchPacket
	Packet isAnnouncementPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *AnnouncementPacketData) Reset()         { *m = AnnouncementPacketData{} }
func (m *AnnouncementPacketData) String() string { return proto.CompactTextString(m) }
func (*AnnouncementPacketData) ProtoMessage()    {}
func (*AnnouncementPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3390cd3eb2f3751, []int{0}
}
func (m *AnnouncementPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnouncementPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnouncementPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnouncementPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnouncementPacketData.Merge(m, src)
}
func (m *AnnouncementPacketData) XXX_Size() int {
	return m.Size()
}
func (m *AnnouncementPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnouncementPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_AnnouncementPacketData proto.InternalMessageInfo

type isAnnouncementPacketData_Packet interface {
	isAnnouncementPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AnnouncementPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type AnnouncementPacketData_IbcBatchPacket struct {
	IbcBatchPacket *IbcBatchPacketData `protobuf:"bytes,2,opt,name=ibcBatchPacket,proto3,oneof" json:"ibcBatchPacket,omitempty"`
}

func (*AnnouncementPacketData_NoData) isAnnouncementPacketData_Packet()         {}
func (*AnnouncementPacketData_IbcBatchPacket) isAnnouncementPacketData_Packet() {}

func (m *AnnouncementPacketData) GetPacket() isAnnouncementPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *AnnouncementPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*AnnouncementPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *AnnouncementPacketData) GetIbcBatchPacket() *IbcBatchPacketData {
	if x, ok := m.GetPacket().(*AnnouncementPacketData_IbcBatchPacket); ok {
		return x.IbcBatchPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AnnouncementPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AnnouncementPacketData_NoData)(nil),
		(*AnnouncementPacketData_IbcBatchPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3390cd3eb2f3751, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// IbcBatchPacketData defines a struct for the packet payload
type IbcBatchPacketData struct {
	AnnouncementType string `protobuf:"bytes,1,opt,name=announcementType,proto3" json:"announcementType,omitempty"`
	FileHash         string `protobuf:"bytes,2,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileUrl          string `protobuf:"bytes,3,opt,name=fileUrl,proto3" json:"fileUrl,omitempty"`
	Creator          string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	RefId            uint64 `protobuf:"varint,5,opt,name=refId,proto3" json:"refId,omitempty"`
}

func (m *IbcBatchPacketData) Reset()         { *m = IbcBatchPacketData{} }
func (m *IbcBatchPacketData) String() string { return proto.CompactTextString(m) }
func (*IbcBatchPacketData) ProtoMessage()    {}
func (*IbcBatchPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3390cd3eb2f3751, []int{2}
}
func (m *IbcBatchPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcBatchPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcBatchPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcBatchPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcBatchPacketData.Merge(m, src)
}
func (m *IbcBatchPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IbcBatchPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcBatchPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IbcBatchPacketData proto.InternalMessageInfo

func (m *IbcBatchPacketData) GetAnnouncementType() string {
	if m != nil {
		return m.AnnouncementType
	}
	return ""
}

func (m *IbcBatchPacketData) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *IbcBatchPacketData) GetFileUrl() string {
	if m != nil {
		return m.FileUrl
	}
	return ""
}

func (m *IbcBatchPacketData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *IbcBatchPacketData) GetRefId() uint64 {
	if m != nil {
		return m.RefId
	}
	return 0
}

// IbcBatchPacketAck defines a struct for the packet acknowledgment
type IbcBatchPacketAck struct {
	BatchId uint64 `protobuf:"varint,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	RefId   uint64 `protobuf:"varint,2,opt,name=refId,proto3" json:"refId,omitempty"`
}

func (m *IbcBatchPacketAck) Reset()         { *m = IbcBatchPacketAck{} }
func (m *IbcBatchPacketAck) String() string { return proto.CompactTextString(m) }
func (*IbcBatchPacketAck) ProtoMessage()    {}
func (*IbcBatchPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3390cd3eb2f3751, []int{3}
}
func (m *IbcBatchPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcBatchPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcBatchPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcBatchPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcBatchPacketAck.Merge(m, src)
}
func (m *IbcBatchPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *IbcBatchPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcBatchPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_IbcBatchPacketAck proto.InternalMessageInfo

func (m *IbcBatchPacketAck) GetBatchId() uint64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *IbcBatchPacketAck) GetRefId() uint64 {
	if m != nil {
		return m.RefId
	}
	return 0
}

func init() {
	proto.RegisterType((*AnnouncementPacketData)(nil), "Liberty30.usappchain.announcement.AnnouncementPacketData")
	proto.RegisterType((*NoData)(nil), "Liberty30.usappchain.announcement.NoData")
	proto.RegisterType((*IbcBatchPacketData)(nil), "Liberty30.usappchain.announcement.IbcBatchPacketData")
	proto.RegisterType((*IbcBatchPacketAck)(nil), "Liberty30.usappchain.announcement.IbcBatchPacketAck")
}

func init() { proto.RegisterFile("announcement/packet.proto", fileDescriptor_b3390cd3eb2f3751) }

var fileDescriptor_b3390cd3eb2f3751 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0xbb, 0x7c, 0xd0, 0x0f, 0xc6, 0xc4, 0xe8, 0xc6, 0x98, 0xea, 0xa1, 0xc1, 0x9e, 0xd0,
	0x84, 0xd6, 0x48, 0xf4, 0x0e, 0x78, 0x80, 0xc4, 0x18, 0xd2, 0xe8, 0xc5, 0x8b, 0xd9, 0x2e, 0x8b,
	0x6d, 0x80, 0x76, 0xb3, 0xdd, 0x26, 0xf2, 0x16, 0x3e, 0x85, 0xcf, 0xc2, 0x91, 0xa3, 0x47, 0x03,
	0x2f, 0x62, 0xba, 0x05, 0x6c, 0xe5, 0xa0, 0xb7, 0xf9, 0xcf, 0xec, 0xff, 0xb7, 0x33, 0x93, 0x81,
	0x13, 0x12, 0x86, 0x51, 0x12, 0x52, 0x36, 0x65, 0xa1, 0x74, 0x38, 0xa1, 0x63, 0x26, 0x6d, 0x2e,
	0x22, 0x19, 0xe1, 0xb3, 0xbb, 0xc0, 0x63, 0x42, 0xce, 0x5a, 0x97, 0x76, 0x12, 0x13, 0xce, 0xa9,
	0x4f, 0x82, 0xd0, 0xce, 0xbf, 0xb7, 0xe6, 0x08, 0x8e, 0xdb, 0xb9, 0xc4, 0x40, 0xf9, 0x6f, 0x89,
	0x24, 0xb8, 0x0b, 0x7a, 0x18, 0xa5, 0x91, 0x81, 0xea, 0xa8, 0xb1, 0x77, 0x75, 0x6e, 0xff, 0x8a,
	0xb3, 0xef, 0x95, 0xa1, 0xa7, 0xb9, 0x6b, 0x2b, 0x7e, 0x86, 0xfd, 0xc0, 0xa3, 0x1d, 0x22, 0xa9,
	0x9f, 0xa1, 0x8d, 0x92, 0x82, 0x5d, 0xff, 0x01, 0xd6, 0x2f, 0x18, 0xd7, 0xe0, 0x1f, 0xb8, 0x4e,
	0x15, 0xf4, 0x6c, 0x66, 0xab, 0x0a, 0x7a, 0xf6, 0xbd, 0xf5, 0x8e, 0x00, 0xef, 0x9a, 0xf1, 0x05,
	0x1c, 0xe4, 0xf9, 0x0f, 0x33, 0xce, 0xd4, 0x68, 0x35, 0x77, 0x27, 0x8f, 0x4f, 0xa1, 0x3a, 0x0a,
	0x26, 0xac, 0x47, 0x62, 0x5f, 0x75, 0x5c, 0x73, 0xb7, 0x1a, 0x1b, 0xf0, 0x3f, 0x8d, 0x1f, 0xc5,
	0xc4, 0xf8, 0xa7, 0x4a, 0x1b, 0x99, 0x56, 0xa8, 0x60, 0x44, 0x46, 0xc2, 0x28, 0x67, 0x95, 0xb5,
	0xc4, 0x47, 0x50, 0x11, 0x6c, 0xd4, 0x1f, 0x1a, 0x95, 0x3a, 0x6a, 0x94, 0xdd, 0x4c, 0x58, 0x5d,
	0x38, 0x2c, 0xf6, 0xd9, 0xa6, 0xe3, 0x14, 0xe2, 0xa5, 0x99, 0xfe, 0x50, 0x75, 0x57, 0x76, 0x37,
	0xf2, 0x1b, 0x52, 0xca, 0x41, 0x3a, 0x83, 0xf9, 0xd2, 0x44, 0x8b, 0xa5, 0x89, 0x3e, 0x97, 0x26,
	0x7a, 0x5b, 0x99, 0xda, 0x62, 0x65, 0x6a, 0x1f, 0x2b, 0x53, 0x7b, 0xba, 0x79, 0x09, 0xa4, 0x9f,
	0x78, 0x36, 0x8d, 0xa6, 0xce, 0x76, 0xdd, 0x4e, 0x12, 0x37, 0x09, 0xe7, 0x4d, 0xb5, 0x70, 0xe7,
	0xd5, 0x29, 0x9c, 0x8f, 0x9c, 0x71, 0x16, 0x7b, 0xba, 0x3a, 0x9f, 0xd6, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa0, 0x98, 0x7a, 0xc2, 0x5b, 0x02, 0x00, 0x00,
}

func (m *AnnouncementPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnouncementPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnouncementPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnnouncementPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnouncementPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AnnouncementPacketData_IbcBatchPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnouncementPacketData_IbcBatchPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcBatchPacket != nil {
		{
			size, err := m.IbcBatchPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IbcBatchPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcBatchPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcBatchPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefId != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RefId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FileUrl) > 0 {
		i -= len(m.FileUrl)
		copy(dAtA[i:], m.FileUrl)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.FileUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AnnouncementType) > 0 {
		i -= len(m.AnnouncementType)
		copy(dAtA[i:], m.AnnouncementType)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.AnnouncementType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IbcBatchPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcBatchPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcBatchPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefId != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RefId))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchId != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnnouncementPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *AnnouncementPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *AnnouncementPacketData_IbcBatchPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcBatchPacket != nil {
		l = m.IbcBatchPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IbcBatchPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AnnouncementType)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.FileUrl)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.RefId != 0 {
		n += 1 + sovPacket(uint64(m.RefId))
	}
	return n
}

func (m *IbcBatchPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchId != 0 {
		n += 1 + sovPacket(uint64(m.BatchId))
	}
	if m.RefId != 0 {
		n += 1 + sovPacket(uint64(m.RefId))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnnouncementPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnouncementPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnouncementPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &AnnouncementPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcBatchPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IbcBatchPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &AnnouncementPacketData_IbcBatchPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcBatchPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcBatchPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcBatchPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnouncementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnouncementType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			m.RefId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcBatchPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcBatchPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcBatchPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			m.RefId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
